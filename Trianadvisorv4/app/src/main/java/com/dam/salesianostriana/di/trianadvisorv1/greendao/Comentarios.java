package com.dam.salesianostriana.di.trianadvisorv1.greendao;

import com.dam.salesianostriana.di.trianadvisorv1.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "COMENTARIOS".
 */
public class Comentarios {

    private Long id;
    private String objectId;
    private String updateAt;
    private String comentario;
    private long idSitioC;
    private long idUsuarioC;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ComentariosDao myDao;

    private Sitios sitios;
    private Long sitios__resolvedKey;

    private Usuarios usuarios;
    private Long usuarios__resolvedKey;


    public Comentarios() {
    }

    public Comentarios(Long id) {
        this.id = id;
    }

    public Comentarios(Long id, String objectId, String updateAt, String comentario, long idSitioC, long idUsuarioC) {
        this.id = id;
        this.objectId = objectId;
        this.updateAt = updateAt;
        this.comentario = comentario;
        this.idSitioC = idSitioC;
        this.idUsuarioC = idUsuarioC;
    }

    public Comentarios(String objectId, String updateAt, String comentario, long idSitioC, long idUsuarioC) {
        this.objectId = objectId;
        this.updateAt = updateAt;
        this.comentario = comentario;
        this.idSitioC = idSitioC;
        this.idUsuarioC = idUsuarioC;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getComentariosDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getUpdateAt() {
        return updateAt;
    }

    public void setUpdateAt(String updateAt) {
        this.updateAt = updateAt;
    }

    public String getComentario() {
        return comentario;
    }

    public void setComentario(String comentario) {
        this.comentario = comentario;
    }

    public long getIdSitioC() {
        return idSitioC;
    }

    public void setIdSitioC(long idSitioC) {
        this.idSitioC = idSitioC;
    }

    public long getIdUsuarioC() {
        return idUsuarioC;
    }

    public void setIdUsuarioC(long idUsuarioC) {
        this.idUsuarioC = idUsuarioC;
    }

    /** To-one relationship, resolved on first access. */
    public Sitios getSitios() {
        long __key = this.idSitioC;
        if (sitios__resolvedKey == null || !sitios__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SitiosDao targetDao = daoSession.getSitiosDao();
            Sitios sitiosNew = targetDao.load(__key);
            synchronized (this) {
                sitios = sitiosNew;
            	sitios__resolvedKey = __key;
            }
        }
        return sitios;
    }

    public void setSitios(Sitios sitios) {
        if (sitios == null) {
            throw new DaoException("To-one property 'idSitioC' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.sitios = sitios;
            idSitioC = sitios.getId();
            sitios__resolvedKey = idSitioC;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Usuarios getUsuarios() {
        long __key = this.idUsuarioC;
        if (usuarios__resolvedKey == null || !usuarios__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UsuariosDao targetDao = daoSession.getUsuariosDao();
            Usuarios usuariosNew = targetDao.load(__key);
            synchronized (this) {
                usuarios = usuariosNew;
            	usuarios__resolvedKey = __key;
            }
        }
        return usuarios;
    }

    public void setUsuarios(Usuarios usuarios) {
        if (usuarios == null) {
            throw new DaoException("To-one property 'idUsuarioC' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.usuarios = usuarios;
            idUsuarioC = usuarios.getId();
            usuarios__resolvedKey = idUsuarioC;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
