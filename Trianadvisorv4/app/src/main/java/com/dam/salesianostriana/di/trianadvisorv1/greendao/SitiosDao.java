package com.dam.salesianostriana.di.trianadvisorv1.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dam.salesianostriana.di.trianadvisorv1.greendao.Sitios;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SITIOS".
*/
public class SitiosDao extends AbstractDao<Sitios, Long> {

    public static final String TABLENAME = "SITIOS";

    /**
     * Properties of entity Sitios.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property UpdateAt = new Property(2, String.class, "updateAt", false, "UPDATE_AT");
        public final static Property Nombre = new Property(3, String.class, "nombre", false, "NOMBRE");
        public final static Property Categoria = new Property(4, String.class, "categoria", false, "CATEGORIA");
        public final static Property Direccion = new Property(5, String.class, "direccion", false, "DIRECCION");
        public final static Property Tlf = new Property(6, String.class, "tlf", false, "TLF");
        public final static Property Descripcion = new Property(7, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property FotoUrl = new Property(8, String.class, "fotoUrl", false, "FOTO_URL");
        public final static Property Latitud = new Property(9, String.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(10, String.class, "longitud", false, "LONGITUD");
    };

    private DaoSession daoSession;


    public SitiosDao(DaoConfig config) {
        super(config);
    }
    
    public SitiosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SITIOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"UPDATE_AT\" TEXT," + // 2: updateAt
                "\"NOMBRE\" TEXT," + // 3: nombre
                "\"CATEGORIA\" TEXT," + // 4: categoria
                "\"DIRECCION\" TEXT," + // 5: direccion
                "\"TLF\" TEXT," + // 6: tlf
                "\"DESCRIPCION\" TEXT," + // 7: descripcion
                "\"FOTO_URL\" TEXT," + // 8: fotoUrl
                "\"LATITUD\" TEXT," + // 9: latitud
                "\"LONGITUD\" TEXT);"); // 10: longitud
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SITIOS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sitios entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String updateAt = entity.getUpdateAt();
        if (updateAt != null) {
            stmt.bindString(3, updateAt);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(4, nombre);
        }
 
        String categoria = entity.getCategoria();
        if (categoria != null) {
            stmt.bindString(5, categoria);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(6, direccion);
        }
 
        String tlf = entity.getTlf();
        if (tlf != null) {
            stmt.bindString(7, tlf);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(8, descripcion);
        }
 
        String fotoUrl = entity.getFotoUrl();
        if (fotoUrl != null) {
            stmt.bindString(9, fotoUrl);
        }
 
        String latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindString(10, latitud);
        }
 
        String longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindString(11, longitud);
        }
    }

    @Override
    protected void attachEntity(Sitios entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sitios readEntity(Cursor cursor, int offset) {
        Sitios entity = new Sitios( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // updateAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nombre
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // categoria
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // direccion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tlf
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // descripcion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fotoUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // latitud
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // longitud
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sitios entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdateAt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNombre(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategoria(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDireccion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTlf(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescripcion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFotoUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLatitud(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLongitud(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sitios entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sitios entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
