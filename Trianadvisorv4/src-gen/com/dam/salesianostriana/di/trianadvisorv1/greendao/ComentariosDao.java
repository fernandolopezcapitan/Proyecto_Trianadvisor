package com.dam.salesianostriana.di.trianadvisorv1.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.dam.salesianostriana.di.trianadvisorv1.greendao.Comentarios;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMENTARIOS".
*/
public class ComentariosDao extends AbstractDao<Comentarios, Long> {

    public static final String TABLENAME = "COMENTARIOS";

    /**
     * Properties of entity Comentarios.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property UpdateAt = new Property(2, String.class, "updateAt", false, "UPDATE_AT");
        public final static Property Comentario = new Property(3, String.class, "comentario", false, "COMENTARIO");
        public final static Property IdSitioC = new Property(4, long.class, "idSitioC", false, "ID_SITIO_C");
        public final static Property IdUsuarioC = new Property(5, long.class, "idUsuarioC", false, "ID_USUARIO_C");
    };

    private DaoSession daoSession;

    private Query<Comentarios> sitios_ComentariosDeUnSitioQuery;
    private Query<Comentarios> usuarios_ComentariosDeUnUsuarioQuery;

    public ComentariosDao(DaoConfig config) {
        super(config);
    }
    
    public ComentariosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMENTARIOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"UPDATE_AT\" TEXT," + // 2: updateAt
                "\"COMENTARIO\" TEXT," + // 3: comentario
                "\"ID_SITIO_C\" INTEGER NOT NULL ," + // 4: idSitioC
                "\"ID_USUARIO_C\" INTEGER NOT NULL );"); // 5: idUsuarioC
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMENTARIOS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comentarios entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String updateAt = entity.getUpdateAt();
        if (updateAt != null) {
            stmt.bindString(3, updateAt);
        }
 
        String comentario = entity.getComentario();
        if (comentario != null) {
            stmt.bindString(4, comentario);
        }
        stmt.bindLong(5, entity.getIdSitioC());
        stmt.bindLong(6, entity.getIdUsuarioC());
    }

    @Override
    protected void attachEntity(Comentarios entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Comentarios readEntity(Cursor cursor, int offset) {
        Comentarios entity = new Comentarios( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // updateAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comentario
            cursor.getLong(offset + 4), // idSitioC
            cursor.getLong(offset + 5) // idUsuarioC
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Comentarios entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdateAt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComentario(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdSitioC(cursor.getLong(offset + 4));
        entity.setIdUsuarioC(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Comentarios entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Comentarios entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "comentariosDeUnSitio" to-many relationship of Sitios. */
    public List<Comentarios> _querySitios_ComentariosDeUnSitio(long idSitioC) {
        synchronized (this) {
            if (sitios_ComentariosDeUnSitioQuery == null) {
                QueryBuilder<Comentarios> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdSitioC.eq(null));
                queryBuilder.orderRaw("T.'ID_SITIO_C' ASC");
                sitios_ComentariosDeUnSitioQuery = queryBuilder.build();
            }
        }
        Query<Comentarios> query = sitios_ComentariosDeUnSitioQuery.forCurrentThread();
        query.setParameter(0, idSitioC);
        return query.list();
    }

    /** Internal query to resolve the "comentariosDeUnUsuario" to-many relationship of Usuarios. */
    public List<Comentarios> _queryUsuarios_ComentariosDeUnUsuario(long idUsuarioC) {
        synchronized (this) {
            if (usuarios_ComentariosDeUnUsuarioQuery == null) {
                QueryBuilder<Comentarios> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdUsuarioC.eq(null));
                queryBuilder.orderRaw("T.'ID_USUARIO_C' ASC");
                usuarios_ComentariosDeUnUsuarioQuery = queryBuilder.build();
            }
        }
        Query<Comentarios> query = usuarios_ComentariosDeUnUsuarioQuery.forCurrentThread();
        query.setParameter(0, idUsuarioC);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSitiosDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUsuariosDao().getAllColumns());
            builder.append(" FROM COMENTARIOS T");
            builder.append(" LEFT JOIN SITIOS T0 ON T.\"ID_SITIO_C\"=T0.\"_id\"");
            builder.append(" LEFT JOIN USUARIOS T1 ON T.\"ID_USUARIO_C\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Comentarios loadCurrentDeep(Cursor cursor, boolean lock) {
        Comentarios entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Sitios sitios = loadCurrentOther(daoSession.getSitiosDao(), cursor, offset);
         if(sitios != null) {
            entity.setSitios(sitios);
        }
        offset += daoSession.getSitiosDao().getAllColumns().length;

        Usuarios usuarios = loadCurrentOther(daoSession.getUsuariosDao(), cursor, offset);
         if(usuarios != null) {
            entity.setUsuarios(usuarios);
        }

        return entity;    
    }

    public Comentarios loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Comentarios> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Comentarios> list = new ArrayList<Comentarios>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Comentarios> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Comentarios> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
