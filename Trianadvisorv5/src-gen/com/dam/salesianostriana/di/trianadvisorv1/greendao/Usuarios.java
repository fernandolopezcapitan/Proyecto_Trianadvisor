package com.dam.salesianostriana.di.trianadvisorv1.greendao;

import java.util.List;
import com.dam.salesianostriana.di.trianadvisorv1.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USUARIOS".
 */
public class Usuarios {

    private Long id;
    private String objectId;
    private String updateAt;
    private String sessionToken;
    private String user;
    private String nombre;
    private String email;
    private String fotoUrl;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UsuariosDao myDao;

    private List<Comentarios> comentariosDeUnUsuario;
    private List<Valoraciones> valoracionesDeUnUsuario;
    private List<Valoraciones> valoracionesDeUnSitio;

    public Usuarios() {
    }

    public Usuarios(Long id) {
        this.id = id;
    }

    public Usuarios(Long id, String objectId, String updateAt, String sessionToken, String user, String nombre, String email, String fotoUrl) {
        this.id = id;
        this.objectId = objectId;
        this.updateAt = updateAt;
        this.sessionToken = sessionToken;
        this.user = user;
        this.nombre = nombre;
        this.email = email;
        this.fotoUrl = fotoUrl;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUsuariosDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getUpdateAt() {
        return updateAt;
    }

    public void setUpdateAt(String updateAt) {
        this.updateAt = updateAt;
    }

    public String getSessionToken() {
        return sessionToken;
    }

    public void setSessionToken(String sessionToken) {
        this.sessionToken = sessionToken;
    }

    public String getUser() {
        return user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getFotoUrl() {
        return fotoUrl;
    }

    public void setFotoUrl(String fotoUrl) {
        this.fotoUrl = fotoUrl;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Comentarios> getComentariosDeUnUsuario() {
        if (comentariosDeUnUsuario == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ComentariosDao targetDao = daoSession.getComentariosDao();
            List<Comentarios> comentariosDeUnUsuarioNew = targetDao._queryUsuarios_ComentariosDeUnUsuario(id);
            synchronized (this) {
                if(comentariosDeUnUsuario == null) {
                    comentariosDeUnUsuario = comentariosDeUnUsuarioNew;
                }
            }
        }
        return comentariosDeUnUsuario;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComentariosDeUnUsuario() {
        comentariosDeUnUsuario = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Valoraciones> getValoracionesDeUnUsuario() {
        if (valoracionesDeUnUsuario == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ValoracionesDao targetDao = daoSession.getValoracionesDao();
            List<Valoraciones> valoracionesDeUnUsuarioNew = targetDao._queryUsuarios_ValoracionesDeUnUsuario(id);
            synchronized (this) {
                if(valoracionesDeUnUsuario == null) {
                    valoracionesDeUnUsuario = valoracionesDeUnUsuarioNew;
                }
            }
        }
        return valoracionesDeUnUsuario;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetValoracionesDeUnUsuario() {
        valoracionesDeUnUsuario = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Valoraciones> getValoracionesDeUnSitio() {
        if (valoracionesDeUnSitio == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ValoracionesDao targetDao = daoSession.getValoracionesDao();
            List<Valoraciones> valoracionesDeUnSitioNew = targetDao._queryUsuarios_ValoracionesDeUnSitio(id);
            synchronized (this) {
                if(valoracionesDeUnSitio == null) {
                    valoracionesDeUnSitio = valoracionesDeUnSitioNew;
                }
            }
        }
        return valoracionesDeUnSitio;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetValoracionesDeUnSitio() {
        valoracionesDeUnSitio = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
